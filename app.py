from flask import Flask, request, jsonify
import os
import subprocess
from export_nmap_result import export_data
# from test import export_data

app = Flask(__name__)

@app.route('/nmap', methods=['GET'])
def nmap_recon():
    """
    Endpoint để thực hiện quét cổng sử dụng nmap.
    :param host: Địa chỉ IP hoặc tên miền cần quét.
    :return: Kết quả của quá trình quét.
    """
    host = request.args.get('host')
    #các port đang mở
    ports_opened = []
    
    # thư mục kết quả
    result_folder = f'result/{host}'
    result_file = f'{result_folder}/recon_{host}.xml'
    
    # nếu đã tồn tại sẽ trả về kết quả
    if os.path.exists(result_folder):
        if os.path.exists(result_file):
            port_result = export_data(result_file)
            for i in port_result:
                ports_opened.append(i['port'])
            return ports_opened
        
    # chưa tồn tại file kết quả sẽ tạo và thực thi
    if not os.path.exists(result_folder):
        try:
            os.makedirs(result_folder)
        except OSError as error:
            print(error)
    command_to_exec = f'nmap -sV -T4 {host} -oX {result_file}'
    try:
        result = subprocess.check_output(command_to_exec, shell=True, text=True)
        return jsonify({'result': result.strip()})

    except subprocess.CalledProcessError as e:
        return jsonify({'error': f'Quét cổng thất bại với mã lỗi {e.returncode}', 'output': e.output}), 500

@app.route('/nmap/scan', methods=['GET'])
def nmap_scan_port():
    """
    Endpoint để thực hiện quét lỗ hổng trên từng cổng của máy chủ sử dụng nmap.
    :param port_array: Chuỗi cổng cần quét, được phân tách bằng dấu phẩy.
    :return: Kết quả của quá trình quét.
    """
    try:
        host = request.args.get('host')
        port_array = request.args.get('ports')
        
        result_folder = f'result/{host}'
        result_file = f'{result_folder}/scan_{host}.xml'
        if os.path.exists(result_folder):
            if os.path.exists(result_file):
                scan_result = export_data(result_file)
                return scan_result
        if not os.path.exists(result_folder):
            os.makedirs(result_folder)
        command_to_exec = f'nmap -sC -p {port_array} {host} -oX {result_file}'
        result = subprocess.check_output(command_to_exec, shell=True, text=True)
        return jsonify({'result': result.strip()})
    except subprocess.CalledProcessError as e:
        return jsonify({'error': f'Quét cổng thất bại với mã lỗi {e.returncode}', 'output': e.output}), 500

@app.route('/crawl', methods=['GET'])
def crawl_endpoint():
    print("hehe")
if __name__ == '__main__':
    app.run(debug=True)